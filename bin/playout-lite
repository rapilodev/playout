#!/usr/bin/perl

use warnings;
use strict;

use Config::General();
use Cwd();
use Data::Dumper;
use DateTime();
use DateTime::Format::Strptime ();
use Fcntl qw(:flock);
use File::Find();
use Getopt::Long();
use JSON();
use HTTP::Request();
use LWP::UserAgent();
use FindBin;

use Playout::Playout();
use Playout::MediaFiles();
use Playout::Upload();

use utf8;
use feature "say";

use open ':std', ':encoding(UTF-8)';

# * build schedule for the next week and play it using liquidsoap
#
# config file
# * required by --config <filename>
# * plus streamTarget containing liquidsoap icecast stream config
#
# <config>
#     mediaDir            /mnt/archive/<project>/
#     tempDir             /var/tmp/
#     timeZone            Europe/Berlin
#     streamTarget        host="localhost", port=8000, user="liquidsoap", password="changeme", mount="/<stream>"
#     fallback            /mnt/archive/<project>/fallback.mp3
# optional:
#     syncGetRecordingAccess  user:password
#     syncSetScheduleUrl  https://<domain>/agenda/upload_playout.cgi?project_id=x&studio_id=y
#     syncPlotTargetDir   user@<domain>:<dir>/
#     syncImageSourceUrl  https://<domain>/agenda_files/media/images/
# </config>

# run script for one week
my $DAYS = 24 * 60 * 60;

sub execute($) {
    my $command = shift;
    print DateTime->now()->datetime . " ---INFO--- execute: " . join( " ", @$command ) . "\n";
    system(@$command);
}

sub get_script($$$) {
    my $icecast  = shift;
    my $fallback = shift;
    my $delay    = shift;

    my $format = DateTime::Format::Strptime->new(
        pattern   => '%Y-%m-%d %H:%M:%S',
        time_zone => 'local',
        on_error  => 'croak',
    );

    my @shows = ();
    my $first = 1;
    my $done  = {};

    my $date = DateTime->now( time_zone => 'local' )->subtract( days => 1 );
    for ( 0 .. 5 ) {
        $date->add( days => 1 );
        my $files = MediaFiles::getFilesByDate( $date->ymd );

        for my $file (
            sort { $files->{$a}->{start} cmp $files->{$b}->{start} }
            keys %$files
          )
        {
            my $event = $files->{$file};
            my $start = $format->parse_datetime( $event->{start} );
            $start = $start->add(seconds => $delay) if $delay;
            my $end   = $start->clone->add( seconds => $event->{duration} );
            push @shows,
              sprintf(
                "%s ( { %dw%dh%dm%ds-%dw%dh%dm%ds }, single(\"%s\") )\n",
                $first ? '  ' : ', ', $start->wday, $start->hour, $start->minute, $start->second, 
                $end->wday, $end->hour, $end->minute, $end->second,
                $event->{file}
              );
            $first = 0;
        }
    }

    my $shows = join '', @shows;
    return qq{
        radio = switch(
            [
$shows
            ]
        );
        radio = mksafe (radio);

        radio= fallback(
            id="fallback",
            track_sensitive=false,
            [
                fail(),
                strip_blank(id="silence", max_blank=60., threshold=-50., radio ) ,
                mksafe(single(id="silence", "$fallback"))
            ]
        )

        output.icecast(
            %mp3(bitrate=192),
            $icecast,
            radio
        );
    };
}

sub play {
    my $config_file = shift;

    my $config = Config::General->new($config_file)->{DefaultConfig}->{config};
    die "could not read config from $config_file" unless $config;
    die "missing mediaDir in config" unless $config->{mediaDir};
    my $icecast = $config->{streamTarget} or die "missing streamTarget in config";

    # save script
    my $script_name = 'replay.liq';
    open my $fh, '>', $script_name or die "$!";
    print $fh get_script( $icecast, $config->{fallback}, $config->{bufferDelay} );
    close $fh;

    system("pkill -f replay.liq");

    # start script
    alarm $config->{maxRunTime} * $DAYS if $config->{maxRunTime};
    my $liquidsoap = qx{which liquidsoap};
    chomp $liquidsoap;
    execute( [ $liquidsoap, $script_name ] );
}

# END cannot be localized
my $options = {};
END {
    system("pkill -f replay.liq") if $options->{play};
}

Getopt::Long::GetOptions(
    "config=s" => \$options->{config},
    "help"     => \$options->{help}
);

die "missing --config " unless $options->{config};
die "cannot read from $options->{config}" unless -r $options->{config};

die qq{$0 --config=<file>
--config   config file
} if $options->{help};

# one instance only
open our $file, '<', $0 or die $!;
flock $file, LOCK_EX | LOCK_NB or die "skip start, script is already running.\n";

Playout::init( { configFile => $options->{config} } );
$options->{play} = 1;
play( $options->{config} );

